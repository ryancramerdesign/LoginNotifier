<?php

/**
 * Login Notifier
 * 
 * Provides ability to send an email, ping a URL or save a log entry when a login occurs.
 *
 * To install, place this file at /site/modules/LoginNotifier.module
 *
 * ProcessWire 2.x 
 * Copyright (C) 2013 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class LoginNotifier extends WireData implements Module, ConfigurableModule {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			// The module's title, typically a little more descriptive than the class name
			'title' => 'Login Notifier', 

			// version: major, minor, revision, i.e. 100 = 1.0.0
			'version' => 102, 

			// summary is brief description of what this module is
			'summary' => 'Provides ability to send an email, ping a URL or save a log entry when a login occurs.',
			
			// Optional URL to more information about the module
			'href' => 'http://processwire.com',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true, 

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true, 
			);
	}

	public function __construct() {
		$this->set('excludeRoles', array()); 
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init() {
		$this->session->addHookAfter('login', $this, 'loginHook'); 
	}

	/**
	 * Post login hook
 	 *
	 */
	public function loginHook($event) {

		$user = $event->return; 
		if(!$user) return;
		$notify = true; 

		foreach($this->excludeRoles as $roleID) {
			if($user->hasRole($roleID)) {
				$notify = false;
				$this->message("Login Notifier skipped for role: " . $this->roles->get($roleID)->name, Notice::debug); 
				break;
			}
		}

		if($notify) {
			if($this->notifyEmail) $this->notifyEmail($user);
			if($this->pingUrl) $this->pingUrl($user);
			if($this->logEntry) $this->saveLog($user);
		} else {
		}
	}

	/**
	 * Send notification email
 	 *
	 */
	protected function notifyEmail(User $user) {
		$subject = $this->parseTags($this->notifySubject, $user); 
		$body = $this->parseTags($this->notifyBody, $user);
		@mail($this->notifyEmail, $subject, $body, "From:{$this->notifyEmail}"); 
	}

	/**
	 * Ping notification URL
 	 *
	 */
	protected function pingUrl(User $user) {
		if(!(int) ini_get('allow_url_fopen')) return; 
		$url = $this->parseTags($this->pingUrl, $user, true);
		$fp = fopen($url, "r");	
	}

	/**
	 * Save log entry
 	 *
	 */
	protected function saveLog(User $user) {
		$log = new FileLog($this->config->paths->logs, get_class($this));
		$log->save($this->parseTags($this->logEntry, $user));
	}

	/**
	 * Parse {tags} from $user and $_SERVER
 	 *
	 */
	protected function parseTags($str, User $user, $urlencode = false) {

		if(strpos($str, '{') === false) return $str; 
		if(!preg_match_all('/\{([-_a-z0-9]+)\}/i', $str, $matches)) return $str; 

		foreach($matches[1] as $key => $tag) {

			if($tag == 'datetime') {
				$value = date($this->config->dateFormat); 

			} else if(isset($_SERVER[$tag])) {
				$value = $this->sanitizer->text($_SERVER[$tag]); 

			} else {
				$value = (string) $user->get($tag);
			}

			if($urlencode) $value = urlencode($value);
			$str = str_replace($matches[0][$key], $value, $str); 	
		}

		return $str; 
	}

	/**
	 * Default settings used by this module
	 *
	 */
	static protected $defaultSettings = array(
		'notifyEmail' => '',
		'notifySubject' => '{HTTP_HOST} login: {name}',
		'notifyBody' => "User: {name}\nURL: {HTTP_HOST}{REQUEST_URI}\nAgent: {HTTP_USER_AGENT}", 
		'pingUrl' => '',
		'logEntry' => '{name} {REMOTE_ADDR}',
		);

	/**
	 * Build a form allowing configuration of this Module
	 *
	 */
	static public function getModuleConfigInputfields(array $data) {

		$modules = wire('modules');
		$data = array_merge(self::$defaultSettings, $data); 
		$fields = new InputfieldWrapper();

		$field = $modules->get("InputfieldMarkup"); 
		$field->label = "Login Notifier Configuration Notes";
		$field->value = 
			"<p>You may specify any user field in the email subject or body, ping URL, or log entry by entering " . 
			"it like this: {name} - which would be the user's login name, as an example. You may also specify " . 
			"any PHP \$_SERVER var like {REMOTE_ADDR}, {HTTP_USER_AGENT}, {REQUEST_URI}, etc.</p>";
		$fields->append($field); 

		$field = $modules->get("InputfieldEmail");
		$field->attr('name', 'notifyEmail');
		$field->attr('value', $data['notifyEmail']);
		$field->label = "Email address to send notification email to when login occurs";
		$field->description = "If you don't want an email to be sent, then leave this blank.";
		$fields->append($field);

		$field = $modules->get("InputfieldText"); 
		$field->attr('name', 'notifySubject'); 
		$field->attr('value', $data['notifySubject']); 
		$field->label = "Email subject";
		$fields->append($field); 

		$field = $modules->get("InputfieldTextarea"); 
		$field->attr('name', 'notifyBody'); 
		$field->attr('value', $data['notifyBody']);
		$field->label = "Email body";
		$field->description = "You may include any user fields in the email by entering the field like this: {name}. ";
		$fields->append($field);

		$field = $modules->get("InputfieldURL");
		$field->attr('name', 'pingUrl');
		$field->attr('value', $data['pingUrl']);
		$field->label = "URL to ping when login occurs";
		$field->description = "You may include any user fields as GET vars by entering the field like this: {name}. ";
		$field->notes = "Example: http://company.com/login/occurred/?username={name}";
		if(!(int) ini_get('allow_url_fopen')) $field->error("Your PHP doesn't have 'allow_url_fopen' enabled, so the ping URL option won't be possible.");
		$fields->append($field);

		$field = $modules->get("InputfieldText"); 
		$field->attr('name', 'logEntry'); 
		$field->attr('value', $data['logEntry']); 
		$field->label = "Log entry in " . wire('config')->paths->logs . "LoginNotifier.txt";
		$fields->append($field);

		$field = $modules->get("InputfieldCheckboxes"); 
		$field->attr('name', 'excludeRoles'); 
		$field->label = "Exclude Roles";
		$field->description = "Check boxes next to any roles you don't want to be notified of logins for.";
		foreach(wire('roles') as $role) if($role->name != 'guest') $field->addOption($role->id, $role->name); 
		$field->attr('value', isset($data['excludeRoles']) && is_array($data['excludeRoles']) ? $data['excludeRoles'] : array());
		$fields->append($field);

		return $fields;
	}
}

